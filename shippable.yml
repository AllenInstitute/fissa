# language setting
language: python

# version numbers
python:
  - "2.7"

env:
  - TEST_NOTEBOOKS=false
  - TEST_NOTEBOOKS=true

# Setup the environment before installing
before_install:
  # ----------------------------------------------------------------------------
  # Work out which version of python we are testing
  # ----------------------------------------------------------------------------
  - PYTHON_VERSION="${SHIPPABLE_PYTHON##*/python}"
  # ----------------------------------------------------------------------------
  # Test setup by printing some variables
  # ----------------------------------------------------------------------------
  - pwd
  - echo "$VIRTUAL_ENV"
  - echo "$SHIPPABLE_PYTHON"
  - echo "$PYTHON_VERSION"
  # ----------------------------------------------------------------------------
  # Install some packages dependencies with apt-get
  # ----------------------------------------------------------------------------
  - sudo apt-get update
  # Install Fortran compiler, BLAS, LAPACK and ATLAS for scipy
  - sudo apt-get install -y gfortran libopenblas-dev liblapack-dev libatlas-dev libatlas-base-dev
  # Install GEOS for Shapely
  - sudo apt-get install -y libgeos-dev
  # Install JPEG library for Pillow>=3.0.0
  - sudo apt-get install -y libjpeg-dev
  # ----------------------------------------------------------------------------
  # The following is taken from Minicoda's how-to Travis page
  # http://conda.pydata.org/docs/travis.html
  # ----------------------------------------------------------------------------
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  # Automatically say yes to any check from conda
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  # Create the conda environment with pip as the only dependency installed
  - conda create -q -n test-environment python=$PYTHON_VERSION pip
  # Activate the test environment
  - source activate test-environment
  # Isolate packages which are editable and definitely need to be installed
  # with pip, and those which can possibly be installed with conda.
  - sed '/^-e/d' requirements.txt > requirements_static.txt &&
      cat requirements_static.txt
  - sed '/^-e/!d' requirements.txt > requirements_editable.txt &&
      cat requirements_editable.txt
  # Install the packages which might be possible with conda. For each one,
  # check if they are on conda's package database and if they aren't try to pip
  # install it instead.
  # First, we remove the version requirement and get just the package name.
  # Then we search the conda database to see if a package with this exact name
  # is present. We already updated our cache, so we don't need to ask the
  # server again, and just use the cached copy. The output of this is a
  # header line and then a list of matching package names. We then grep
  # this to check whether one of the lines of the output is an exact match
  # for the name of the package we want to install.
  - while read PV; do
      echo "";
      echo "==================================================================";
      PN="$(echo $PV | sed 's/^\([^=<>]*\).*/\1/')";
      if conda search $PN --full-name --use-index-cache --names-only |
           grep -qFxi $PN;
      then
        echo "Package $PN is on conda. Installing it from there.";
        echo "------------------------------------------------------------------";
        conda install -q $PV;
      else
        echo "Package $PN isn't on conda. Trying to install it from PyPI.";
        echo "------------------------------------------------------------------";
        pip install $PV;
      fi
    done < requirements_static.txt
  # Install the packages which are editable and must be done with pip
  - pip install -v -r requirements_editable.txt
  # Install the packages which are needed for plotting
  - if [[ "$TEST_NOTEBOOKS" == "true" ]]; then
      pip install -r requirements_plots.txt;
    fi
  # ----------------------------------------------------------------------------

# install requirements
install:
  # To do the coverage, we need the pytest-cov package
  - pip install pytest-cov
  - python setup.py develop
  - pip freeze

# Set up folders for test results
before_script:
  - mkdir -p shippable/testresults
  - mkdir -p shippable/codecoverage

# commands to run test scripts
script:
  - which python
  # Test the main code base
  - py.test --junitxml=shippable/testresults/testresults.xml --cov=fissa --cov-report xml --cov-config .coveragerc
  - mv coverage.xml shippable/codecoverage/
  # Test the notebooks
  - function check_notebooks {
      RETURNVALUE=0;
      for NBFILE in *.ipynb;
      do
        echo "==================================================================";
        echo "Converting $NBFILE to a script";
        echo "------------------------------------------------------------------";
        jupyter nbconvert --to=script "$NBFILE";
        PYFILE="${NBFILE%.*}.py";
        echo "Commenting out any lines in $PYFILE which are calls to help()";
        sed -ie 's/^\(help(.*)\)/#\ \1/' "$PYFILE";
        echo "------------------------------------------------------------------";
        echo "Trying to run the generated script $PYFILE";
        echo "------------------------------------------------------------------";
        ipython "$PYFILE";
        ((RETURNVALUE+=$?));
        echo "------------------------------------------------------------------";
        echo "Current exit code is $RETURNVALUE";
      done;
      return $RETURNVALUE;
    }
  # Need a more up-to-date version of ipython
  # Use this line until they release 4.1.0, then we can use that official release
  - if [[ "$TEST_NOTEBOOKS" == "true" ]]; then
      pip install git+git://github.com/ipython/ipython.git@cf094024c37d184a1794afbb0fb6d45ddf1e61b0;
    fi
  - if [[ "$TEST_NOTEBOOKS" == "true" ]]; then cd doc; fi
  - if [[ "$TEST_NOTEBOOKS" == "true" ]]; then check_notebooks; fi
  - if [[ "$TEST_NOTEBOOKS" == "true" ]]; then cd ..; fi

# commands to run after tests are done
after_script:
  - pwd
  - ls -alh
