image: Visual Studio 2015

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\.ci\\appveyor\\run_with_env.cmd"
    GIS_URL_ROOT: "http://download.gisinternals.com/sdk/downloads/"
    GIS_INTERNALS: "release-1911-gdal-mapserver.zip"
    GIS_INTERNALS_LIBS: "release-1911-gdal-mapserver-libs.zip"
    BUILD_DOCS: "true"

  matrix:

    # Versions listed below which are pre-installed on Appveyor will be
    # used when available.
    # See: https://www.appveyor.com/docs/windows-images-software/#python
    # Otherwise, the requested version of Python will be downloaded
    # and installed using the script .ci/appveyor/install.ps1

    - PYTHON: C:\Python35
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"
      SHAPELY_VER: "1.6.4.post2"

    - PYTHON: C:\Python35-x64
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"
      SHAPELY_VER: "1.6.4.post2"

    - PYTHON: C:\Python36
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      SHAPELY_VER: "1.7.0"

    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"
      SHAPELY_VER: "1.7.0"

    - PYTHON: C:\\Python37
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"
      SHAPELY_VER: "1.7.0"

    - PYTHON: C:\\Python37-x64
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"
      SHAPELY_VER: "1.7.0"

    - PYTHON: C:\Python38
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "32"
      SHAPELY_VER: "1.7.0"

    - PYTHON: C:\Python38-x64
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"
      SHAPELY_VER: "1.7.0"

platform:
  - x86
  - x64

matrix:
  fast_finish: true
  exclude:
    - platform: x86
      PYTHON_ARCH: "64"
    - platform: x64
      PYTHON_ARCH: "32"

init:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }

install:
  - ECHO "Filesystem root:"
  - ps: ls "C:/"

  - ECHO "Installed SDKs:"
  - ps: |
      If (Test-Path "C:/Program Files/Microsoft SDKs/Windows") {
        ls "C:/Program Files/Microsoft SDKs/Windows"
      }

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & .ci\appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET "PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     %CMD_IN_ENV%
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest version of pip, setuptools, wheel
  - "%CMD_IN_ENV% python -m pip install --upgrade pip setuptools wheel"

  # Install GEOS
  - ps: mkdir C:\build | out-null
  - ps: mkdir C:\gdal | out-null

  - IF "%PYTHON_ARCH%"=="32" (
      curl %GIS_URL_ROOT%%GIS_INTERNALS% --output gdalbin.zip &&
      7z x gdalbin.zip -oC:\gdal
    )
  - IF "%PYTHON_ARCH%"=="32" (
      curl %GIS_URL_ROOT%%GIS_INTERNALS_LIBS% --output gdallibs.zip &&
      7z x gdallibs.zip -oC:\gdal
    )
  - SET "PATH=C:\\gdal;C:\\gdal\\bin;C:\\gdal\\data;C:\\gdal\\bin\\gdal\\apps;%PATH%"
  - SET "GDAL_DATA=C:\\gdal\\bin\\gdal-data"
  - SET "PACKAGE_DATA=1"

  - ECHO "Filesystem C:/GDAL:"
  - ps: ls "C:/GDAL"

  # Need to manually download and install Shapely
  - SET "SHAPELY_URL=https://www.dropbox.com/s/dgpsd63e2vh4vrp/"
  - FOR /f "tokens=1,2 delims=." %%a IN ("%PYTHON_VERSION%") DO (
      SET "PYVER_SHORT=%%a%%b"
    )
  - IF "%PYTHON_ARCH%"=="64" (
      SET "SHAPELY_ARCH=_amd64"
    ) ELSE (
      SET "SHAPELY_ARCH=%PYTHON_ARCH%"
    )
  - SET "SHAPELY_FNAME=Shapely-%SHAPELY_VER%-cp%PYVER_SHORT%-cp%PYVER_SHORT%m-win%SHAPELY_ARCH%.whl"
  - ps: |
      $source = ($env:SHAPELY_URL) + ($env:SHAPELY_FNAME) + "?dl=1"
      $target = ((Resolve-Path .).Path + "\" + ($env:SHAPELY_FNAME))
      echo "Downloading from $source"
      echo ("Destination: " + $target)
      (new-object net.webclient).DownloadFile("$source", "$target")
  # Show current directory contents
  - ps: ls

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install %SHAPELY_FNAME%"
  - "%CMD_IN_ENV% pip install .[dev]"
  - IF "%BUILD_DOCS%"=="true" ( %CMD_IN_ENV% pip install .[docs] )

build: false

test_script:
  # Run the project tests and store results in testresults.xml log
  - "%CMD_IN_ENV% py.test --cov=fissa --cov-report term --cov-report xml --cov-config .coveragerc --junitxml=testresults.xml"
  # Check documentation can be built
  - cd docs
  - IF "%BUILD_DOCS%"=="true" ( make.bat html )
  - cd ..

after_test:
  # If tests are successful, create binary packages for the project.
  - "%CMD_IN_ENV% python setup.py sdist bdist_wheel --universal"
  - "%CMD_IN_ENV% python setup.py bdist_wininst"
  # Allow failure on bdist_msi, because it does not work with letters in
  # the package version number. Using letters is normal for development
  # versions (e.g. 1.3.dev0, 1.3.2rc4), and we don't want to cause Appveyor
  # to mark the build to fail because of it. The command will work for your
  # release versions if their version numbers are only numeric (e.g. 1.3.2).
  - "%CMD_IN_ENV% python setup.py bdist_msi || ver>nul"
  - ps: ls dist

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

on_success:
  # Push coverage reports
  - '%CMD_IN_ENV% python -m pip install codecov'
  - '%CMD_IN_ENV% python -m codecov -f coverage.xml || echo "Codecov push failed" && ver>nul'
  - '%CMD_IN_ENV% python -m pip install coveralls'
  - '%CMD_IN_ENV% python -m coveralls || echo "Coveralls push failed" && ver>nul'

on_finish:
  # Upload test results to AppVeyor
  - ps: |
      If (Test-Path .\testresults.xml) {
        (new-object net.webclient).UploadFile(
          "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
          (Resolve-Path .\testresults.xml)
        )
      }
      $LastExitCode = 0
